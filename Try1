git clone https://github.com/arab007-maker/arab007-maker.github.io
cd arab007-maker.github.io
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Website</title>
    <link rel="stylesheet" href="styles.css"> <!-- Link to your CSS file -->
</head>
<body>
    <h1>Welcome to My Website</h1>
    <p>This is my new website hosted on GitHub Pages!</p>
</body>
</html>
body {
    font-family: Arial, sans-serif;
    background-color: #f1f1f1;
}

h1 {
    color: #009a9d; /* Kuwaiti national color */
}
git add index.html styles.css
git commit -m "Initial commit with index.html and styles.css"
git push origin main
<meta name="description" content="Testing">
<meta name="keywords" content="test1, Test2, Test3">
@media (max-width: 768px) {
    h1 {
        font-size: 1.5rem;
    }
}
# Create main project directory
mkdir kuwait-national-repository
cd kuwait-national-repository

# Initialize Node.js backend
mkdir backend
cd backend
npm init -y
npm install express mongoose dotenv bcryptjs jsonwebtoken multer aws-sdk passport passport-jwt cors

# Create frontend directory
cd ..
npx create-react-app client
cd client
npm install axios react-bootstrap bootstrap


.....
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');
const passport = require('passport');

dotenv.config();

const app = express();
app.use(express.json());
app.use(cors()); // Allow cross-origin requests

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Passport middleware
app.use(passport.initialize());

// Routes
const userRoutes = require('./routes/userRoutes');
const dataRoutes = require('./routes/dataRoutes');
app.use('/api/users', userRoutes);
app.use('/api/data', dataRoutes);

// Server port
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});

......
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  name: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  position: { type: String, required: true },
  affiliation: { type: String, required: true },
  employment_id: { type: String, required: true },
  employment_email: { type: String, required: true },
  role: { type: String, enum: ['researcher', 'official'], required: true },
  password: { type: String, required: true },
  verified: { type: Boolean, default: false },
});

module.exports = mongoose.model('User', userSchema);

......
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const multer = require('multer');
const User = require('../models/User');
const { body, validationResult } = require('express-validator');
const passport = require('passport');

const router = express.Router();

// File upload setup using Multer
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    cb(null, './uploads/');
  },
  filename: (req, file, cb) => {
    cb(null, `${Date.now()}-${file.originalname}`);
  }
});
const upload = multer({ storage });

// Register a new user (Researcher or Official)
router.post('/register', upload.single('employment_file'), [
  body('email').isEmail(),
  body('position').notEmpty(),
  body('affiliation').notEmpty(),
], async (req, res) => {
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }

  try {
    const { name, email, position, affiliation, employment_id, employment_email, role, password } = req.body;
    const employmentFile = req.file;

    if (!employmentFile) {
      return res.status(400).json({ message: 'Please upload your employment verification document.' });
    }

    // Create a new user
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);

    const newUser = new User({
      name,
      email,
      position,
      affiliation,
      employment_id,
      employment_email,
      role,
      password: hashedPassword,
      verified: false, // Initially, set as unverified
    });

    await newUser.save();
    res.status(200).json({ message: 'Registration successful. Awaiting verification.' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
});

// Login route for users
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }

    const payload = { id: user.id, role: user.role };
    const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });

    res.json({ token });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
});

module.exports = router;
.....
import React, { useState } from 'react';
import axios from 'axios';
import { Button, Form, Container } from 'react-bootstrap';

function App() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/users/login', { email, password });
      localStorage.setItem('token', response.data.token);
      setMessage('Login successful!');
    } catch (error) {
      setMessage('Login failed. Please check your credentials.');
    }
  };

  return (
    <Container style={{ marginTop: '50px' }}>
      <h2>Login</h2>
      {message && <p>{message}</p>}
      <Form onSubmit={handleLogin}>
        <Form.Group controlId="formEmail">
          <Form.Label>Email address</Form.Label>
          <Form.Control
            type="email"
            placeholder="Enter email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
          />
        </Form.Group>

        <Form.Group controlId="formPassword">
          <Form.Label>Password</Form.Label>
          <Form.Control
            type="password"
            placeholder="Password"
            value={password}
            onChange={(e) => setPassword(e.target.value)}
          />
        </Form.Group>

        <Button variant="primary" type="submit">
          Login
        </Button>
      </Form>
    </Container>
  );
}

export default App;

........
body {
  font-family: Arial, sans-serif;
  background-color: #f1f1f1;
}

.container {
  background-color: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
}

h2 {
  color: #009a9d; /* Kuwaiti national color */
}

button {
  background-color: #006f6f;
}
.......
Running
node server.js
......
Style and AI
npm install react-icons axios react-router-dom
......
import React, { useState } from 'react';
import axios from 'axios';
import { Button, Form, Container, Row, Col, Card } from 'react-bootstrap';
import { FaUserAlt, FaSignInAlt, FaFileUpload } from 'react-icons/fa';
import { Link } from 'react-router-dom';

function App() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [message, setMessage] = useState('');

  const handleLogin = async (e) => {
    e.preventDefault();
    try {
      const response = await axios.post('/api/users/login', { email, password });
      localStorage.setItem('token', response.data.token);
      setMessage('Login successful!');
    } catch (error) {
      setMessage('Login failed. Please check your credentials.');
    }
  };

  return (
    <Container className="mt-5">
      {/* Hero Section */}
      <section className="hero bg-primary text-white text-center py-5">
        <h1>Welcome to the Kuwaiti National Data Repository</h1>
        <p>Your trusted platform for social impact data and initiatives.</p>
      </section>

      {/* Login Section */}
      <Row className="mt-4">
        <Col md={6} className="mx-auto">
          <Card className="shadow-sm">
            <Card.Body>
              <h3 className="text-center mb-4">Login</h3>
              {message && <p className="text-danger text-center">{message}</p>}
              <Form onSubmit={handleLogin}>
                <Form.Group controlId="formEmail">
                  <Form.Label>Email address</Form.Label>
                  <Form.Control
                    type="email"
                    placeholder="Enter email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                  />
                </Form.Group>

                <Form.Group controlId="formPassword">
                  <Form.Label>Password</Form.Label>
                  <Form.Control
                    type="password"
                    placeholder="Password"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                  />
                </Form.Group>

                <Button variant="primary" type="submit" block>
                  <FaSignInAlt /> Login
                </Button>
              </Form>
            </Card.Body>
          </Card>
        </Col>
      </Row>

      {/* Featured Sections */}
      <section className="mt-5">
        <h2 className="text-center mb-4">Explore Key Initiatives</h2>
        <Row>
          <Col md={4} className="mb-4">
            <Card>
              <Card.Body>
                <FaFileUpload size={50} className="mb-3" />
                <Card.Title>Create New Data</Card.Title>
                <Card.Text>
                  Submit new projects, laws, or initiatives to the platform.
                </Card.Text>
                <Link to="/submit" className="btn btn-primary w-100">
                  Submit Now
                </Link>
              </Card.Body>
            </Card>
          </Col>
          <Col md={4} className="mb-4">
            <Card>
              <Card.Body>
                <FaUserAlt size={50} className="mb-3" />
                <Card.Title>Research & Browse</Card.Title>
                <Card.Text>
                  Browse through various initiatives and laws to get insights.
                </Card.Text>
                <Link to="/research" className="btn btn-primary w-100">
                  Browse Now
                </Link>
              </Card.Body>
            </Card>
          </Col>
        </Row>
      </section>
    </Container>
  );
}

export default App;
.......
/* General Body Styles */
body {
  font-family: 'Arial', sans-serif;
  background-color: #f8f9fa;
}

/* Hero Section */
.hero {
  background-color: #006f6f; /* Kuwaiti Green */
  padding: 60px 0;
  border-radius: 5px;
}
.hero h1 {
  font-size: 2.5rem;
}
.hero p {
  font-size: 1.2rem;
}

/* Cards and Buttons */
.card {
  border: none;
  border-radius: 10px;
}
.card-body {
  text-align: center;
}
.btn-primary {
  background-color: #006f6f; /* Kuwaiti Green */
  border-color: #006f6f;
}
.btn-primary:hover {
  background-color: #004f4f;
  border-color: #004f4f;
}

/* Form Styles */
.form-control {
  border-radius: 10px;
}
.....
/* General Body Styles */
body {
  font-family: 'Arial', sans-serif;
  background-color: #f8f9fa;
}

/* Hero Section */
.hero {
  background-color: #006f6f; /* Kuwaiti Green */
  padding: 60px 0;
  border-radius: 5px;
}
.hero h1 {
  font-size: 2.5rem;
}
.hero p {
  font-size: 1.2rem;
}

/* Cards and Buttons */
.card {
  border: none;
  border-radius: 10px;
}
.card-body {
  text-align: center;
}
.btn-primary {
  background-color: #006f6f; /* Kuwaiti Green */
  border-color: #006f6f;
}
.btn-primary:hover {
  background-color: #004f4f;
  border-color: #004f4f;
}

/* Form Styles */
.form-control {
  border-radius: 10px;
}
......
@media (max-width: 768px) {
  .hero h1 {
    font-size: 1.8rem;
  }

  .hero p {
    font-size: 1rem;
  }

  .card-body {
    padding: 15px;
  }
}
.....
AI
import React, { useState } from 'react';
import { Button, Form, Modal } from 'react-bootstrap';
import axios from 'axios';
import { FaComments } from 'react-icons/fa';

const Chatbot = () => {
  const [showModal, setShowModal] = useState(false);
  const [userMessage, setUserMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);

  const handleSendMessage = async () => {
    const response = await axios.post('https://your-dialogflow-endpoint', { query: userMessage });
    const botReply = response.data.fulfillmentText;
    setChatHistory([...chatHistory, { message: userMessage, sender: 'user' }, { message: botReply, sender: 'bot' }]);
    setUserMessage('');
  };

  return (
    <>
      <Button className="fixed-bottom right-0 m-3" onClick={() => setShowModal(true)}>
        <FaComments size={30} />
      </Button>

      <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
        <Modal.Header closeButton>
          <Modal.Title>Chat with AI Assistant</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <div style={{ height: '300px', overflowY: 'scroll' }}>
            {chatHistory.map((chat, index) => (
              <div key={index} className={chat.sender === 'user' ? 'text-right' : 'text-left'}>
                <p>{chat.message}</p>
              </div>
            ))}
          </div>
          <Form.Control
            as="textarea"
              rows={3
}
if (!employmentFile) {
  return res.status(400).json({ message: 'Please upload your employment verification document.' });
}

// Create a new user
const salt = await bcrypt.genSalt(10);
const hashedPassword = await bcrypt.hash(password, salt);

const newUser = new User({
  name,
  email,
  position,
  affiliation,
  employment_id,
  employment_email,
  role,
  password: hashedPassword,
  verified: false, // Initially, set as unverified
});

await newUser.save();
res.status(200).json({ message: 'Registration successful. Awaiting verification.' });
const isMatch = await bcrypt.compare(password, user.password);
if (!isMatch) {
  return res.status(400).json({ message: 'Invalid credentials' });
}

const payload = { id: user.id, role: user.role };
const token = jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' });

res.json({ token });
    <Form.Group controlId="formPassword">
      <Form.Label>Password</Form.Label>
      <Form.Control
        type="password"
        placeholder="Password"
        value={password}
        onChange={(e) => setPassword(e.target.value)}
      />
    </Form.Group>

    <Button variant="primary" type="submit">
      Login
    </Button>
  </Form>
</Container>
  {/* Login Section */}
  <Row className="mt-4">
    <Col md={6} className="mx-auto">
      <Card className="shadow-sm">
        <Card.Body>
          <h3 className="text-center mb-4">Login</h3>
          {message && <p className="text-danger text-center">{message}</p>}
          <Form onSubmit={handleLogin}>
            <Form.Group controlId="formEmail">
              <Form.Label>Email address</Form.Label>
              <Form.Control
                type="email"
                placeholder="Enter email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
              />
            </Form.Group>

            <Form.Group controlId="formPassword">
              <Form.Label>Password</Form.Label>
              <Form.Control
                type="password"
                placeholder="Password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
              />
            </Form.Group>

            <Button variant="primary" type="submit" block>
              <FaSignInAlt /> Login
            </Button>
          </Form>
        </Card.Body>
      </Card>
    </Col>
  </Row>

  {/* Featured Sections */}
  <section className="mt-5">
    <h2 className="text-center mb-4">Explore Key Initiatives</h2>
    <Row>
      <Col md={4} className="mb-4">
        <Card>
          <Card.Body>
            <FaFileUpload size={50} className="mb-3" />
            <Card.Title>Create New Data</Card.Title>
            <Card.Text>
              Submit new projects, laws, or initiatives to the platform.
            </Card.Text>
            <Link to="/submit" className="btn btn-primary w-100">
              Submit Now
            </Link>
          </Card.Body>
        </Card>
      </Col>
      <Col md={4} className="mb-4">
        <Card>
          <Card.Body>
            <FaUserAlt size={50} className="mb-3" />
            <Card.Title>Research & Browse</Card.Title>
            <Card.Text>
              Browse through various initiatives and laws to get insights.
            </Card.Text>
            <Link to="/research" className="btn btn-primary w-100">
              Browse Now
            </Link>
          </Card.Body>
        </Card>
      </Col>
    </Row>
  </section>
</Container>
  <Modal show={showModal} onHide={() => setShowModal(false)} size="lg">
    <Modal.Header closeButton>
      <Modal.Title>Chat with AI Assistant</Modal.Title>
    </Modal.Header>
    <Modal.Body>
      <div style={{ height: '300px', overflowY: 'scroll' }}>
        {chatHistory.map((chat, index) => (
          <div key={index} className={chat.sender === 'user' ? 'text-right' : 'text-left'}>
            <p>{chat.message}</p>
          </div>
        ))}
      </div>
      <Form.Control
        as="textarea"
        rows={3 /project-folder
MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_secret_key
import 'bootstrap/dist/css/bootstrap.min.css';
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});
/project-folder
  /backend (Back-End files)
  /client (React Front-End files)
....
Install stuff
npm init -y
npm install express mongoose bcryptjs jsonwebtoken dotenv multer
... 
back end stuff
/backend
  /models
    User.js
    Campaign.js
  /routes
    userRoutes.js
    campaignRoutes.js
  server.js
  .env
......

const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');
const cors = require('cors');

dotenv.config();
const app = express();

// Middleware
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
}).then(() => console.log('Connected to MongoDB')).catch(err => console.log(err));

// Routes
const userRoutes = require('./routes/userRoutes');
const campaignRoutes = require('./routes/campaignRoutes');

app.use('/api/users', userRoutes);
app.use('/api/campaigns', campaignRoutes);

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
 ....
MONGO_URI=your_mongodb_connection_string
JWT_SECRET=your_secret_key
....
const mongoose = require('mongoose');

const UserSchema = new mongoose.Schema({
  name: String,
  email: { type: String, unique: true },
  password: String,
  role: { type: String, enum: ['researcher', 'official'], default: 'researcher' },
});

module.exports = mongoose.model('User', UserSchema);
....
const mongoose = require('mongoose');

const CampaignSchema = new mongoose.Schema({
  title: String,
  description: String,
  type: { type: String, enum: ['law', 'initiative', 'project', 'campaign'], required: true },
  createdBy: { type: mongoose.Schema.Types.ObjectId, ref: 'User' },
  date: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Campaign', CampaignSchema);
.....
Register and login
const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const router = express.Router();

// Register new user
router.post('/register', async (req, res) => {
  const { name, email, password, role } = req.body;
 
  const existingUser = await User.findOne({ email });
  if (existingUser) return res.status(400).json({ message: 'User already exists' });

  const hashedPassword = await bcrypt.hash(password, 10);

  const user = new User({ name, email, password: hashedPassword, role });
  await user.save();

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
 
  res.json({ token });
});

// Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  const user = await User.findOne({ email });
  if (!user) return res.status(400).json({ message: 'User not found' });

  const isMatch = await bcrypt.compare(password, user.password);
  if (!isMatch) return res.status(400).json({ message: 'Invalid credentials' });

  const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });

  res.json({ token });
});

module.exports = router;
.....
Creating projectss
const express = require('express');
const Campaign = require('../models/Campaign');
const jwt = require('jsonwebtoken');
const router = express.Router();

// Create new campaign
router.post('/', async (req, res) => {
  const { title, description, type } = req.body;
 
  const newCampaign = new Campaign({
    title,
    description,
    type,
    createdBy: req.userId
  });

  await newCampaign.save();
  res.json(newCampaign);
});

// Fetch all campaigns
router.get('/', async (req, res) => {
  const campaigns = await Campaign.find();
  res.json(campaigns);
});

module.exports = router;
....
npx create-react-app .
.....
npm install axios react-bootstrap bootstrap react-router-dom
.....
/client
  /src
    /components
      Navbar.js
      Login.js
      Register.js
      CampaignList.js
      CreateCampaign.js
    App.js
    index.css
    index.js
.....
import React from 'react';
import { BrowserRouter as Router, Route, Routes } from 'react-router-dom';
import { Container } from 'react-bootstrap';
import Navbar from './components/Navbar';
import Login from './components/Login';
import Register from './components/Register';
import CampaignList from './components/CampaignList';
import CreateCampaign from './components/CreateCampaign';

function App() {
  return (
    <Router>
      <Navbar />
      <Container>
        <Routes>
          <Route path="/" element={<CampaignList />} />
          <Route path="/login" element={<Login />} />
          <Route path="/register" element={<Register />} />
          <Route path="/create-campaign" element={<CreateCampaign />} />
        </Routes>
      </Container>
    </Router>
  );
}

export default App;
....
import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { Card, Button } from 'react-bootstrap';

const CampaignList = () => {
  const [campaigns, setCampaigns] = useState([]);

  useEffect(() => {
    axios.get('http://localhost:5000/api/campaigns')
      .then(response => setCampaigns(response.data))
      .catch(error => console.log(error));
  }, []);

  return (
    <div>
      <h2>All Campaigns</h>
